// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: patreon_users_query.sql

package database

import (
	"context"
	"time"
)

const CreateOrUpdatePatreonUser = `-- name: CreateOrUpdatePatreonUser :one
INSERT INTO patreon_users (patreon_user_id, created_at, updated_at, user_id, full_name, email, thumb_url, pledge_created_at, pledge_ended_at, tier_id, last_charge_status, patron_status)
    VALUES ($1, now(), now(), $2, $3, $4, $5, $6, $7, $8, $9, $10)
ON CONFLICT(patreon_user_id) DO UPDATE
    SET updated_at = EXCLUDED.updated_at,
        user_id = EXCLUDED.user_id,
        full_name = EXCLUDED.full_name,
        email = EXCLUDED.email,
        thumb_url = EXCLUDED.thumb_url,
        pledge_created_at = EXCLUDED.pledge_created_at,
        pledge_ended_at = EXCLUDED.pledge_ended_at,
        tier_id = EXCLUDED.tier_id,
        last_charge_status = EXCLUDED.last_charge_status,
        patron_status = EXCLUDED.patron_status
RETURNING
    patreon_user_id, created_at, updated_at, user_id, full_name, email, thumb_url, pledge_created_at, pledge_ended_at, tier_id, last_charge_status, patron_status
`

type CreateOrUpdatePatreonUserParams struct {
	PatreonUserID    int64     `json:"patreon_user_id"`
	UserID           int64     `json:"user_id"`
	FullName         string    `json:"full_name"`
	Email            string    `json:"email"`
	ThumbUrl         string    `json:"thumb_url"`
	PledgeCreatedAt  time.Time `json:"pledge_created_at"`
	PledgeEndedAt    time.Time `json:"pledge_ended_at"`
	TierID           int64     `json:"tier_id"`
	LastChargeStatus string    `json:"last_charge_status"`
	PatronStatus     string    `json:"patron_status"`
}

func (q *Queries) CreateOrUpdatePatreonUser(ctx context.Context, arg CreateOrUpdatePatreonUserParams) (*PatreonUsers, error) {
	row := q.db.QueryRow(ctx, CreateOrUpdatePatreonUser,
		arg.PatreonUserID,
		arg.UserID,
		arg.FullName,
		arg.Email,
		arg.ThumbUrl,
		arg.PledgeCreatedAt,
		arg.PledgeEndedAt,
		arg.TierID,
		arg.LastChargeStatus,
		arg.PatronStatus,
	)
	var i PatreonUsers
	err := row.Scan(
		&i.PatreonUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FullName,
		&i.Email,
		&i.ThumbUrl,
		&i.PledgeCreatedAt,
		&i.PledgeEndedAt,
		&i.TierID,
		&i.LastChargeStatus,
		&i.PatronStatus,
	)
	return &i, err
}

const CreatePatreonUser = `-- name: CreatePatreonUser :one
INSERT INTO patreon_users (patreon_user_id, created_at, updated_at, user_id, full_name, email, thumb_url, pledge_created_at, pledge_ended_at, tier_id, last_charge_status, patron_status)
    VALUES ($1, now(), now(), $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING
    patreon_user_id, created_at, updated_at, user_id, full_name, email, thumb_url, pledge_created_at, pledge_ended_at, tier_id, last_charge_status, patron_status
`

type CreatePatreonUserParams struct {
	PatreonUserID    int64     `json:"patreon_user_id"`
	UserID           int64     `json:"user_id"`
	FullName         string    `json:"full_name"`
	Email            string    `json:"email"`
	ThumbUrl         string    `json:"thumb_url"`
	PledgeCreatedAt  time.Time `json:"pledge_created_at"`
	PledgeEndedAt    time.Time `json:"pledge_ended_at"`
	TierID           int64     `json:"tier_id"`
	LastChargeStatus string    `json:"last_charge_status"`
	PatronStatus     string    `json:"patron_status"`
=======
INSERT INTO patreon_users (patreon_user_id, created_at, updated_at, user_id, full_name, email, thumb_url, pledge_created_at, pledge_ended_at, tier_id)
    VALUES ($1, now(), now(), $2, $3, $4, $5, $6, $7, $8)
RETURNING
    patreon_user_id, created_at, updated_at, user_id, full_name, email, thumb_url, pledge_created_at, pledge_ended_at, tier_id
`

type CreatePatreonUserParams struct {
	PatreonUserID   int64     `json:"patreon_user_id"`
	UserID          int64     `json:"user_id"`
	FullName        string    `json:"full_name"`
	Email           string    `json:"email"`
	ThumbUrl        string    `json:"thumb_url"`
	PledgeCreatedAt time.Time `json:"pledge_created_at"`
	PledgeEndedAt   time.Time `json:"pledge_ended_at"`
	TierID          int64     `json:"tier_id"`
}

func (q *Queries) CreatePatreonUser(ctx context.Context, arg CreatePatreonUserParams) (*PatreonUsers, error) {
	row := q.db.QueryRow(ctx, CreatePatreonUser,
		arg.PatreonUserID,
		arg.UserID,
		arg.FullName,
		arg.Email,
		arg.ThumbUrl,
		arg.PledgeCreatedAt,
		arg.PledgeEndedAt,
		arg.TierID,
		arg.LastChargeStatus,
		arg.PatronStatus,
	)
	var i PatreonUsers
	err := row.Scan(
		&i.PatreonUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FullName,
		&i.Email,
		&i.ThumbUrl,
		&i.PledgeCreatedAt,
		&i.PledgeEndedAt,
		&i.TierID,
		&i.LastChargeStatus,
		&i.PatronStatus,
	)
	return &i, err
}

const DeletePatreonUser = `-- name: DeletePatreonUser :execrows
DELETE FROM patreon_users
WHERE patreon_user_id = $1 AND user_id = $2
`

type DeletePatreonUserParams struct {
	PatreonUserID int64 `json:"patreon_user_id"`
	UserID        int64 `json:"user_id"`
}

func (q *Queries) DeletePatreonUser(ctx context.Context, arg DeletePatreonUserParams) (int64, error) {
	result, err := q.db.Exec(ctx, DeletePatreonUser, arg.PatreonUserID, arg.UserID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const GetPatreonUser = `-- name: GetPatreonUser :one
SELECT
    patreon_user_id, created_at, updated_at, user_id, full_name, email, thumb_url, pledge_created_at, pledge_ended_at, tier_id, last_charge_status, patron_status
FROM
    patreon_users
WHERE
    patreon_user_id = $1
`

func (q *Queries) GetPatreonUser(ctx context.Context, patreonUserID int64) (*PatreonUsers, error) {
	row := q.db.QueryRow(ctx, GetPatreonUser, patreonUserID)
	var i PatreonUsers
	err := row.Scan(
		&i.PatreonUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FullName,
		&i.Email,
		&i.ThumbUrl,
		&i.PledgeCreatedAt,
		&i.PledgeEndedAt,
		&i.TierID,
		&i.LastChargeStatus,
		&i.PatronStatus,
	)
	return &i, err
}

const GetPatreonUsers = `-- name: GetPatreonUsers :many
SELECT
    patreon_user_id, created_at, updated_at, user_id, full_name, email, thumb_url, pledge_created_at, pledge_ended_at, tier_id, last_charge_status, patron_status
FROM
    patreon_users
`

func (q *Queries) GetPatreonUsers(ctx context.Context) ([]*PatreonUsers, error) {
	rows, err := q.db.Query(ctx, GetPatreonUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*PatreonUsers{}
	for rows.Next() {
		var i PatreonUsers
		if err := rows.Scan(
			&i.PatreonUserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.FullName,
			&i.Email,
			&i.ThumbUrl,
			&i.PledgeCreatedAt,
			&i.PledgeEndedAt,
			&i.TierID,
			&i.LastChargeStatus,
			&i.PatronStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetPatreonUsersByUserID = `-- name: GetPatreonUsersByUserID :many
SELECT
    patreon_user_id, created_at, updated_at, user_id, full_name, email, thumb_url, pledge_created_at, pledge_ended_at, tier_id, last_charge_status, patron_status
FROM
    patreon_users
WHERE
    user_id = $1
`

func (q *Queries) GetPatreonUsersByUserID(ctx context.Context, userID int64) ([]*PatreonUsers, error) {
	rows, err := q.db.Query(ctx, GetPatreonUsersByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*PatreonUsers{}
	for rows.Next() {
		var i PatreonUsers
		if err := rows.Scan(
			&i.PatreonUserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.FullName,
			&i.Email,
			&i.ThumbUrl,
			&i.PledgeCreatedAt,
			&i.PledgeEndedAt,
			&i.TierID,
			&i.LastChargeStatus,
			&i.PatronStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdatePatreonUser = `-- name: UpdatePatreonUser :execrows
UPDATE
    patreon_users
SET
    updated_at = now(),
    user_id = $2,
    full_name = $3,
    email = $4,
    thumb_url = $5,
    pledge_created_at = $6,
    pledge_ended_at = $7,
    tier_id = $8,
    last_charge_status = $9,
    patron_status = $10
WHERE
    patreon_user_id = $1
`

type UpdatePatreonUserParams struct {
	PatreonUserID    int64     `json:"patreon_user_id"`
	UserID           int64     `json:"user_id"`
	FullName         string    `json:"full_name"`
	Email            string    `json:"email"`
	ThumbUrl         string    `json:"thumb_url"`
	PledgeCreatedAt  time.Time `json:"pledge_created_at"`
	PledgeEndedAt    time.Time `json:"pledge_ended_at"`
	TierID           int64     `json:"tier_id"`
	LastChargeStatus string    `json:"last_charge_status"`
	PatronStatus     string    `json:"patron_status"`
}

func (q *Queries) UpdatePatreonUser(ctx context.Context, arg UpdatePatreonUserParams) (int64, error) {
	result, err := q.db.Exec(ctx, UpdatePatreonUser,
		arg.PatreonUserID,
		arg.UserID,
		arg.FullName,
		arg.Email,
		arg.ThumbUrl,
		arg.PledgeCreatedAt,
		arg.PledgeEndedAt,
		arg.TierID,
		arg.LastChargeStatus,
		arg.PatronStatus,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
