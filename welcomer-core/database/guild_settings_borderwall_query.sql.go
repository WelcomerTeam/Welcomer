// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: guild_settings_borderwall_query.sql

package database

import (
	"context"

	"github.com/jackc/pgtype"
)

const CreateBorderwallGuildSettings = `-- name: CreateBorderwallGuildSettings :one
INSERT INTO guild_settings_borderwall (guild_id, toggle_enabled, toggle_send_dm, channel, message_verify, message_verified, roles_on_join, roles_on_verify)
    VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING
    guild_id, toggle_enabled, toggle_send_dm, channel, message_verify, message_verified, roles_on_join, roles_on_verify
`

type CreateBorderwallGuildSettingsParams struct {
	GuildID         int64        `json:"guild_id"`
	ToggleEnabled   bool         `json:"toggle_enabled"`
	ToggleSendDm    bool         `json:"toggle_send_dm"`
	Channel         int64        `json:"channel"`
	MessageVerify   pgtype.JSONB `json:"message_verify"`
	MessageVerified pgtype.JSONB `json:"message_verified"`
	RolesOnJoin     []int64      `json:"roles_on_join"`
	RolesOnVerify   []int64      `json:"roles_on_verify"`
}

func (q *Queries) CreateBorderwallGuildSettings(ctx context.Context, arg CreateBorderwallGuildSettingsParams) (*GuildSettingsBorderwall, error) {
	row := q.db.QueryRow(ctx, CreateBorderwallGuildSettings,
		arg.GuildID,
		arg.ToggleEnabled,
		arg.ToggleSendDm,
		arg.Channel,
		arg.MessageVerify,
		arg.MessageVerified,
		arg.RolesOnJoin,
		arg.RolesOnVerify,
	)
	var i GuildSettingsBorderwall
	err := row.Scan(
		&i.GuildID,
		&i.ToggleEnabled,
		&i.ToggleSendDm,
		&i.Channel,
		&i.MessageVerify,
		&i.MessageVerified,
		&i.RolesOnJoin,
		&i.RolesOnVerify,
	)
	return &i, err
}

const CreateOrUpdateBorderwallGuildSettings = `-- name: CreateOrUpdateBorderwallGuildSettings :one
INSERT INTO guild_settings_borderwall (guild_id, toggle_enabled, toggle_send_dm, channel, message_verify, message_verified, roles_on_join, roles_on_verify)
    VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
ON CONFLICT(guild_id) DO UPDATE
    SET toggle_enabled = EXCLUDED.toggle_enabled, 
        toggle_send_dm = EXCLUDED.toggle_send_dm, 
        channel = EXCLUDED.channel, 
        message_verify = EXCLUDED.message_verify, 
        message_verified = EXCLUDED.message_verified, 
        roles_on_join = EXCLUDED.roles_on_join, 
        roles_on_verify = EXCLUDED.roles_on_verify
RETURNING
    guild_id, toggle_enabled, toggle_send_dm, channel, message_verify, message_verified, roles_on_join, roles_on_verify
`

type CreateOrUpdateBorderwallGuildSettingsParams struct {
	GuildID         int64        `json:"guild_id"`
	ToggleEnabled   bool         `json:"toggle_enabled"`
	ToggleSendDm    bool         `json:"toggle_send_dm"`
	Channel         int64        `json:"channel"`
	MessageVerify   pgtype.JSONB `json:"message_verify"`
	MessageVerified pgtype.JSONB `json:"message_verified"`
	RolesOnJoin     []int64      `json:"roles_on_join"`
	RolesOnVerify   []int64      `json:"roles_on_verify"`
}

func (q *Queries) CreateOrUpdateBorderwallGuildSettings(ctx context.Context, arg CreateOrUpdateBorderwallGuildSettingsParams) (*GuildSettingsBorderwall, error) {
	row := q.db.QueryRow(ctx, CreateOrUpdateBorderwallGuildSettings,
		arg.GuildID,
		arg.ToggleEnabled,
		arg.ToggleSendDm,
		arg.Channel,
		arg.MessageVerify,
		arg.MessageVerified,
		arg.RolesOnJoin,
		arg.RolesOnVerify,
	)
	var i GuildSettingsBorderwall
	err := row.Scan(
		&i.GuildID,
		&i.ToggleEnabled,
		&i.ToggleSendDm,
		&i.Channel,
		&i.MessageVerify,
		&i.MessageVerified,
		&i.RolesOnJoin,
		&i.RolesOnVerify,
	)
	return &i, err
}

const GetBorderwallGuildSettings = `-- name: GetBorderwallGuildSettings :one
SELECT
    guild_id, toggle_enabled, toggle_send_dm, channel, message_verify, message_verified, roles_on_join, roles_on_verify
FROM
    guild_settings_borderwall
WHERE
    guild_id = $1
`

func (q *Queries) GetBorderwallGuildSettings(ctx context.Context, guildID int64) (*GuildSettingsBorderwall, error) {
	row := q.db.QueryRow(ctx, GetBorderwallGuildSettings, guildID)
	var i GuildSettingsBorderwall
	err := row.Scan(
		&i.GuildID,
		&i.ToggleEnabled,
		&i.ToggleSendDm,
		&i.Channel,
		&i.MessageVerify,
		&i.MessageVerified,
		&i.RolesOnJoin,
		&i.RolesOnVerify,
	)
	return &i, err
}

const UpdateBorderwallGuildSettings = `-- name: UpdateBorderwallGuildSettings :execrows
UPDATE
    guild_settings_borderwall
SET
    toggle_enabled = $2,
    toggle_send_dm = $3,
    channel = $4,
    message_verify = $5,
    message_verified = $6,
    roles_on_join = $7,
    roles_on_verify = $8
WHERE
    guild_id = $1
`

type UpdateBorderwallGuildSettingsParams struct {
	GuildID         int64        `json:"guild_id"`
	ToggleEnabled   bool         `json:"toggle_enabled"`
	ToggleSendDm    bool         `json:"toggle_send_dm"`
	Channel         int64        `json:"channel"`
	MessageVerify   pgtype.JSONB `json:"message_verify"`
	MessageVerified pgtype.JSONB `json:"message_verified"`
	RolesOnJoin     []int64      `json:"roles_on_join"`
	RolesOnVerify   []int64      `json:"roles_on_verify"`
}

func (q *Queries) UpdateBorderwallGuildSettings(ctx context.Context, arg UpdateBorderwallGuildSettingsParams) (int64, error) {
	result, err := q.db.Exec(ctx, UpdateBorderwallGuildSettings,
		arg.GuildID,
		arg.ToggleEnabled,
		arg.ToggleSendDm,
		arg.Channel,
		arg.MessageVerify,
		arg.MessageVerified,
		arg.RolesOnJoin,
		arg.RolesOnVerify,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
