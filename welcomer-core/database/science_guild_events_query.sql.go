// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: science_guild_events_query.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/gofrs/uuid"
	"github.com/jackc/pgtype"
)

type CreateManyScienceGuildEventsParams struct {
	GuildEventUuid uuid.UUID     `json:"guild_event_uuid"`
	GuildID        int64         `json:"guild_id"`
	UserID         sql.NullInt64 `json:"user_id"`
	CreatedAt      time.Time     `json:"created_at"`
	EventType      int32         `json:"event_type"`
	Data           pgtype.JSON   `json:"data"`
}

const CreateScienceGuildEvent = `-- name: CreateScienceGuildEvent :one
INSERT INTO science_guild_events (guild_event_uuid, guild_id, user_id, created_at, event_type, data)
    VALUES (uuid_generate_v7(), $1, $2, now(), $3, $4)
RETURNING
    guild_event_uuid, guild_id, user_id, created_at, event_type, data
`

type CreateScienceGuildEventParams struct {
	GuildID   int64         `json:"guild_id"`
	UserID    sql.NullInt64 `json:"user_id"`
	EventType int32         `json:"event_type"`
	Data      pgtype.JSON   `json:"data"`
}

func (q *Queries) CreateScienceGuildEvent(ctx context.Context, arg CreateScienceGuildEventParams) (*ScienceGuildEvents, error) {
	row := q.db.QueryRow(ctx, CreateScienceGuildEvent,
		arg.GuildID,
		arg.UserID,
		arg.EventType,
		arg.Data,
	)
	var i ScienceGuildEvents
	err := row.Scan(
		&i.GuildEventUuid,
		&i.GuildID,
		&i.UserID,
		&i.CreatedAt,
		&i.EventType,
		&i.Data,
	)
	return &i, err
}

const GetExpiredWelcomeMessageEvents = `-- name: GetExpiredWelcomeMessageEvents :many
SELECT
    science_guild_events.guild_id,
    science_guild_events.user_id,
    CAST(science_guild_events.data ->> 'channel_id' AS BIGINT) AS channel_id,
    CAST(science_guild_events.data ->> 'message_id' AS BIGINT) AS message_id
FROM 
    science_guild_events
    LEFT JOIN
        science_guild_events message_deleted
    ON
        message_deleted.guild_id = science_guild_events.guild_id
        AND message_deleted.user_id = science_guild_events.user_id
        AND message_deleted.event_type = $1
        AND message_deleted.data ->> 'message_id' = science_guild_events.data ->> 'message_id'
WHERE
    science_guild_events.guild_id = $2
    AND science_guild_events.event_type = $3
    AND science_guild_events.data ->> 'message_id' IS NOT NULL
    AND science_guild_events.created_at < $4
    AND message_deleted.guild_event_uuid IS NULL
LIMIT $5
`

type GetExpiredWelcomeMessageEventsParams struct {
	ScienceGuildEventTypeWelcomeMessageRemoved int32     `json:"science_guild_event_type_welcome_message_removed"`
	GuildID                                    int64     `json:"guild_id"`
	ScienceGuildEventTypeUserWelcomed          int32     `json:"science_guild_event_type_user_welcomed"`
	WelcomeMessageLifetime                     time.Time `json:"welcome_message_lifetime"`
	EventLimit                                 int32     `json:"event_limit"`
}

type GetExpiredWelcomeMessageEventsRow struct {
	GuildID   int64         `json:"guild_id"`
	UserID    sql.NullInt64 `json:"user_id"`
	ChannelID int64         `json:"channel_id"`
	MessageID int64         `json:"message_id"`
}

func (q *Queries) GetExpiredWelcomeMessageEvents(ctx context.Context, arg GetExpiredWelcomeMessageEventsParams) ([]*GetExpiredWelcomeMessageEventsRow, error) {
	rows, err := q.db.Query(ctx, GetExpiredWelcomeMessageEvents,
		arg.ScienceGuildEventTypeWelcomeMessageRemoved,
		arg.GuildID,
		arg.ScienceGuildEventTypeUserWelcomed,
		arg.WelcomeMessageLifetime,
		arg.EventLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetExpiredWelcomeMessageEventsRow{}
	for rows.Next() {
		var i GetExpiredWelcomeMessageEventsRow
		if err := rows.Scan(
			&i.GuildID,
			&i.UserID,
			&i.ChannelID,
			&i.MessageID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetScienceGuildEvent = `-- name: GetScienceGuildEvent :one
SELECT
    guild_event_uuid, guild_id, user_id, created_at, event_type, data
FROM
    science_guild_events
WHERE
    guild_event_uuid = $1
`

func (q *Queries) GetScienceGuildEvent(ctx context.Context, guildEventUuid uuid.UUID) (*ScienceGuildEvents, error) {
	row := q.db.QueryRow(ctx, GetScienceGuildEvent, guildEventUuid)
	var i ScienceGuildEvents
	err := row.Scan(
		&i.GuildEventUuid,
		&i.GuildID,
		&i.UserID,
		&i.CreatedAt,
		&i.EventType,
		&i.Data,
	)
	return &i, err
}

const GetScienceGuildJoinLeaveEventForUser = `-- name: GetScienceGuildJoinLeaveEventForUser :one
SELECT
    guild_event_uuid, science_guild_events.guild_id, user_id, science_guild_events.created_at, event_type, data, invite_code, guild_invites.guild_id, created_by, guild_invites.created_at, uses
FROM
    science_guild_events
    LEFT JOIN guild_invites ON guild_invites.invite_code = science_guild_events.data ->> 'invite_code'
WHERE
    science_guild_events.event_type IN ($1, $2)
    AND science_guild_events.guild_id = $3
    AND science_guild_events.user_id = $4
ORDER BY
    science_guild_events.created_at DESC
LIMIT 1
`

type GetScienceGuildJoinLeaveEventForUserParams struct {
	EventType   int32         `json:"event_type"`
	EventType_2 int32         `json:"event_type_2"`
	GuildID     int64         `json:"guild_id"`
	UserID      sql.NullInt64 `json:"user_id"`
}

type GetScienceGuildJoinLeaveEventForUserRow struct {
	GuildEventUuid uuid.UUID      `json:"guild_event_uuid"`
	GuildID        int64          `json:"guild_id"`
	UserID         sql.NullInt64  `json:"user_id"`
	CreatedAt      time.Time      `json:"created_at"`
	EventType      int32          `json:"event_type"`
	Data           pgtype.JSON    `json:"data"`
	InviteCode     sql.NullString `json:"invite_code"`
	GuildID_2      sql.NullInt64  `json:"guild_id_2"`
	CreatedBy      sql.NullInt64  `json:"created_by"`
	CreatedAt_2    sql.NullTime   `json:"created_at_2"`
	Uses           sql.NullInt64  `json:"uses"`
}

func (q *Queries) GetScienceGuildJoinLeaveEventForUser(ctx context.Context, arg GetScienceGuildJoinLeaveEventForUserParams) (*GetScienceGuildJoinLeaveEventForUserRow, error) {
	row := q.db.QueryRow(ctx, GetScienceGuildJoinLeaveEventForUser,
		arg.EventType,
		arg.EventType_2,
		arg.GuildID,
		arg.UserID,
	)
	var i GetScienceGuildJoinLeaveEventForUserRow
	err := row.Scan(
		&i.GuildEventUuid,
		&i.GuildID,
		&i.UserID,
		&i.CreatedAt,
		&i.EventType,
		&i.Data,
		&i.InviteCode,
		&i.GuildID_2,
		&i.CreatedBy,
		&i.CreatedAt_2,
		&i.Uses,
	)
	return &i, err
}
