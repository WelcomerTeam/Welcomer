// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: science_events_query.sql

package database

import (
	"context"

	"github.com/gofrs/uuid"
	"github.com/jackc/pgtype"
)

const CreateScienceEvent = `-- name: CreateScienceEvent :one
INSERT INTO science_events (event_uuid, created_at, event_type, data)
    VALUES (uuid_generate_v7(), now(), $1, $2)
RETURNING
    event_uuid, created_at, event_type, data
`

type CreateScienceEventParams struct {
	EventType int32        `json:"event_type"`
	Data      pgtype.JSONB `json:"data"`
}

func (q *Queries) CreateScienceEvent(ctx context.Context, arg CreateScienceEventParams) (*ScienceEvents, error) {
	row := q.db.QueryRow(ctx, CreateScienceEvent, arg.EventType, arg.Data)
	var i ScienceEvents
	err := row.Scan(
		&i.EventUuid,
		&i.CreatedAt,
		&i.EventType,
		&i.Data,
	)
	return &i, err
}

const GetScienceEvent = `-- name: GetScienceEvent :one
SELECT
    event_uuid, created_at, event_type, data
FROM
    science_events
WHERE
    event_uuid = $1
`

func (q *Queries) GetScienceEvent(ctx context.Context, eventUuid uuid.UUID) (*ScienceEvents, error) {
	row := q.db.QueryRow(ctx, GetScienceEvent, eventUuid)
	var i ScienceEvents
	err := row.Scan(
		&i.EventUuid,
		&i.CreatedAt,
		&i.EventType,
		&i.Data,
	)
	return &i, err
}
