// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: guild_invites_query.sql

package database

import (
	"context"
	"time"
)

const CreateGuildInvites = `-- name: CreateGuildInvites :one
INSERT INTO guild_invites (invite_code, guild_id, created_by, created_at, uses)
    VALUES ($1, $2, $3, $4, $5)
RETURNING
    invite_code, guild_id, created_by, created_at, uses
`

type CreateGuildInvitesParams struct {
	InviteCode string    `json:"invite_code"`
	GuildID    int64     `json:"guild_id"`
	CreatedBy  int64     `json:"created_by"`
	CreatedAt  time.Time `json:"created_at"`
	Uses       int64     `json:"uses"`
}

func (q *Queries) CreateGuildInvites(ctx context.Context, arg CreateGuildInvitesParams) (*GuildInvites, error) {
	row := q.db.QueryRow(ctx, CreateGuildInvites,
		arg.InviteCode,
		arg.GuildID,
		arg.CreatedBy,
		arg.CreatedAt,
		arg.Uses,
	)
	var i GuildInvites
	err := row.Scan(
		&i.InviteCode,
		&i.GuildID,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.Uses,
	)
	return &i, err
}

const CreateOrUpdateGuildInvites = `-- name: CreateOrUpdateGuildInvites :one
INSERT INTO guild_invites (invite_code, guild_id, created_by, created_at, uses)
    VALUES ($1, $2, $3, $4, $5)
ON CONFLICT(invite_code) DO UPDATE
    SET guild_id = EXCLUDED.guild_id,
        created_by = EXCLUDED.created_by,
        created_at = EXCLUDED.created_at,
        uses = EXCLUDED.uses
RETURNING
    invite_code, guild_id, created_by, created_at, uses
`

type CreateOrUpdateGuildInvitesParams struct {
	InviteCode string    `json:"invite_code"`
	GuildID    int64     `json:"guild_id"`
	CreatedBy  int64     `json:"created_by"`
	CreatedAt  time.Time `json:"created_at"`
	Uses       int64     `json:"uses"`
}

func (q *Queries) CreateOrUpdateGuildInvites(ctx context.Context, arg CreateOrUpdateGuildInvitesParams) (*GuildInvites, error) {
	row := q.db.QueryRow(ctx, CreateOrUpdateGuildInvites,
		arg.InviteCode,
		arg.GuildID,
		arg.CreatedBy,
		arg.CreatedAt,
		arg.Uses,
	)
	var i GuildInvites
	err := row.Scan(
		&i.InviteCode,
		&i.GuildID,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.Uses,
	)
	return &i, err
}

const DeleteGuildInvites = `-- name: DeleteGuildInvites :execrows
DELETE FROM
    guild_invites
WHERE
    invite_code = $1
    AND guild_id = $2
`

type DeleteGuildInvitesParams struct {
	InviteCode string `json:"invite_code"`
	GuildID    int64  `json:"guild_id"`
}

func (q *Queries) DeleteGuildInvites(ctx context.Context, arg DeleteGuildInvitesParams) (int64, error) {
	result, err := q.db.Exec(ctx, DeleteGuildInvites, arg.InviteCode, arg.GuildID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const GetGuildInvites = `-- name: GetGuildInvites :many
SELECT
    invite_code, guild_id, created_by, created_at, uses
FROM
    guild_invites
WHERE
    guild_id = $1
`

func (q *Queries) GetGuildInvites(ctx context.Context, guildID int64) ([]*GuildInvites, error) {
	rows, err := q.db.Query(ctx, GetGuildInvites, guildID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GuildInvites{}
	for rows.Next() {
		var i GuildInvites
		if err := rows.Scan(
			&i.InviteCode,
			&i.GuildID,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.Uses,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
