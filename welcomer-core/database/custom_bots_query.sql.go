// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: custom_bots_query.sql

package database

import (
	"context"

	"github.com/gofrs/uuid"
)

const CreateCustomBot = `-- name: CreateCustomBot :one
INSERT INTO custom_bots (custom_bot_uuid, guild_id, token, created_at, is_active, application_id, application_name, application_avatar)
VALUES ($1, $2, $3, now(), $4, $5, $6, $7)
RETURNING
    custom_bot_uuid, guild_id, token, created_at, is_active, application_id, application_name, application_avatar
`

type CreateCustomBotParams struct {
	CustomBotUuid     uuid.UUID `json:"custom_bot_uuid"`
	GuildID           int64     `json:"guild_id"`
	Token             string    `json:"token"`
	IsActive          bool      `json:"is_active"`
	ApplicationID     int64     `json:"application_id"`
	ApplicationName   string    `json:"application_name"`
	ApplicationAvatar string    `json:"application_avatar"`
}

func (q *Queries) CreateCustomBot(ctx context.Context, arg CreateCustomBotParams) (*CustomBots, error) {
	row := q.db.QueryRow(ctx, CreateCustomBot,
		arg.CustomBotUuid,
		arg.GuildID,
		arg.Token,
		arg.IsActive,
		arg.ApplicationID,
		arg.ApplicationName,
		arg.ApplicationAvatar,
	)
	var i CustomBots
	err := row.Scan(
		&i.CustomBotUuid,
		&i.GuildID,
		&i.Token,
		&i.CreatedAt,
		&i.IsActive,
		&i.ApplicationID,
		&i.ApplicationName,
		&i.ApplicationAvatar,
	)
	return &i, err
}

const DeleteCustomBot = `-- name: DeleteCustomBot :execrows
DELETE FROM
    custom_bots
WHERE
    custom_bot_uuid = $1
`

func (q *Queries) DeleteCustomBot(ctx context.Context, customBotUuid uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, DeleteCustomBot, customBotUuid)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const GetCustomBotByApplicationId = `-- name: GetCustomBotByApplicationId :one
SELECT
    custom_bot_uuid, guild_id, token, created_at, is_active, application_id, application_name, application_avatar
FROM
    custom_bots
WHERE
    application_id = $1
`

func (q *Queries) GetCustomBotByApplicationId(ctx context.Context, applicationID int64) (*CustomBots, error) {
	row := q.db.QueryRow(ctx, GetCustomBotByApplicationId, applicationID)
	var i CustomBots
	err := row.Scan(
		&i.CustomBotUuid,
		&i.GuildID,
		&i.Token,
		&i.CreatedAt,
		&i.IsActive,
		&i.ApplicationID,
		&i.ApplicationName,
		&i.ApplicationAvatar,
	)
	return &i, err
}

const GetCustomBotByGuildId = `-- name: GetCustomBotByGuildId :one
SELECT
    custom_bot_uuid, guild_id, token, created_at, is_active, application_id, application_name, application_avatar
FROM
    custom_bots
WHERE
    guild_id = $1
`

func (q *Queries) GetCustomBotByGuildId(ctx context.Context, guildID int64) (*CustomBots, error) {
	row := q.db.QueryRow(ctx, GetCustomBotByGuildId, guildID)
	var i CustomBots
	err := row.Scan(
		&i.CustomBotUuid,
		&i.GuildID,
		&i.Token,
		&i.CreatedAt,
		&i.IsActive,
		&i.ApplicationID,
		&i.ApplicationName,
		&i.ApplicationAvatar,
	)
	return &i, err
}

const UpdateCustomBotApplication = `-- name: UpdateCustomBotApplication :one
UPDATE
    custom_bots
SET
    application_id = $2,
    application_name = $3,
    application_avatar = $4
WHERE
    custom_bot_uuid = $1
RETURNING
    custom_bot_uuid, guild_id, token, created_at, is_active, application_id, application_name, application_avatar
`

type UpdateCustomBotApplicationParams struct {
	CustomBotUuid     uuid.UUID `json:"custom_bot_uuid"`
	ApplicationID     int64     `json:"application_id"`
	ApplicationName   string    `json:"application_name"`
	ApplicationAvatar string    `json:"application_avatar"`
}

func (q *Queries) UpdateCustomBotApplication(ctx context.Context, arg UpdateCustomBotApplicationParams) (*CustomBots, error) {
	row := q.db.QueryRow(ctx, UpdateCustomBotApplication,
		arg.CustomBotUuid,
		arg.ApplicationID,
		arg.ApplicationName,
		arg.ApplicationAvatar,
	)
	var i CustomBots
	err := row.Scan(
		&i.CustomBotUuid,
		&i.GuildID,
		&i.Token,
		&i.CreatedAt,
		&i.IsActive,
		&i.ApplicationID,
		&i.ApplicationName,
		&i.ApplicationAvatar,
	)
	return &i, err
}

const UpdateCustomBotToken = `-- name: UpdateCustomBotToken :one
UPDATE
    custom_bots
SET
    token = $2,
    is_active = $3,
    application_id = $4,
    application_name = $5,
    application_avatar = $6
WHERE
    custom_bot_uuid = $1
RETURNING
    custom_bot_uuid, guild_id, token, created_at, is_active, application_id, application_name, application_avatar
`

type UpdateCustomBotTokenParams struct {
	CustomBotUuid     uuid.UUID `json:"custom_bot_uuid"`
	Token             string    `json:"token"`
	IsActive          bool      `json:"is_active"`
	ApplicationID     int64     `json:"application_id"`
	ApplicationName   string    `json:"application_name"`
	ApplicationAvatar string    `json:"application_avatar"`
}

func (q *Queries) UpdateCustomBotToken(ctx context.Context, arg UpdateCustomBotTokenParams) (*CustomBots, error) {
	row := q.db.QueryRow(ctx, UpdateCustomBotToken,
		arg.CustomBotUuid,
		arg.Token,
		arg.IsActive,
		arg.ApplicationID,
		arg.ApplicationName,
		arg.ApplicationAvatar,
	)
	var i CustomBots
	err := row.Scan(
		&i.CustomBotUuid,
		&i.GuildID,
		&i.Token,
		&i.CreatedAt,
		&i.IsActive,
		&i.ApplicationID,
		&i.ApplicationName,
		&i.ApplicationAvatar,
	)
	return &i, err
}
