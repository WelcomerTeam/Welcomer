// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: guilds_query.sql

package database

import (
	"context"
)

const CreateGuild = `-- name: CreateGuild :one
INSERT INTO guilds (guild_id, embed_colour, site_splash_url, site_staff_visible, site_guild_visible, site_allow_invites, member_count)
    VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING
    guild_id, embed_colour, site_splash_url, site_staff_visible, site_guild_visible, site_allow_invites, member_count
`

type CreateGuildParams struct {
	GuildID          int64  `json:"guild_id"`
	EmbedColour      int32  `json:"embed_colour"`
	SiteSplashUrl    string `json:"site_splash_url"`
	SiteStaffVisible bool   `json:"site_staff_visible"`
	SiteGuildVisible bool   `json:"site_guild_visible"`
	SiteAllowInvites bool   `json:"site_allow_invites"`
	MemberCount      int32  `json:"member_count"`
}

func (q *Queries) CreateGuild(ctx context.Context, arg CreateGuildParams) (*Guilds, error) {
	row := q.db.QueryRow(ctx, CreateGuild,
		arg.GuildID,
		arg.EmbedColour,
		arg.SiteSplashUrl,
		arg.SiteStaffVisible,
		arg.SiteGuildVisible,
		arg.SiteAllowInvites,
		arg.MemberCount,
	)
	var i Guilds
	err := row.Scan(
		&i.GuildID,
		&i.EmbedColour,
		&i.SiteSplashUrl,
		&i.SiteStaffVisible,
		&i.SiteGuildVisible,
		&i.SiteAllowInvites,
		&i.MemberCount,
	)
	return &i, err
}

const CreateOrUpdateGuild = `-- name: CreateOrUpdateGuild :one
INSERT INTO guilds (guild_id, embed_colour, site_splash_url, site_staff_visible, site_guild_visible, site_allow_invites, member_count)
    VALUES ($1, $2, $3, $4, $5, $6, $7)
ON CONFLICT(guild_id) DO UPDATE
    SET embed_colour = EXCLUDED.embed_colour,
        site_splash_url = EXCLUDED.site_splash_url,
        site_staff_visible = EXCLUDED.site_staff_visible,
        site_guild_visible = EXCLUDED.site_guild_visible,
        site_allow_invites = EXCLUDED.site_allow_invites,
        member_count = EXCLUDED.member_count
RETURNING
    guild_id, embed_colour, site_splash_url, site_staff_visible, site_guild_visible, site_allow_invites, member_count
`

type CreateOrUpdateGuildParams struct {
	GuildID          int64  `json:"guild_id"`
	EmbedColour      int32  `json:"embed_colour"`
	SiteSplashUrl    string `json:"site_splash_url"`
	SiteStaffVisible bool   `json:"site_staff_visible"`
	SiteGuildVisible bool   `json:"site_guild_visible"`
	SiteAllowInvites bool   `json:"site_allow_invites"`
	MemberCount      int32  `json:"member_count"`
}

func (q *Queries) CreateOrUpdateGuild(ctx context.Context, arg CreateOrUpdateGuildParams) (*Guilds, error) {
	row := q.db.QueryRow(ctx, CreateOrUpdateGuild,
		arg.GuildID,
		arg.EmbedColour,
		arg.SiteSplashUrl,
		arg.SiteStaffVisible,
		arg.SiteGuildVisible,
		arg.SiteAllowInvites,
		arg.MemberCount,
	)
	var i Guilds
	err := row.Scan(
		&i.GuildID,
		&i.EmbedColour,
		&i.SiteSplashUrl,
		&i.SiteStaffVisible,
		&i.SiteGuildVisible,
		&i.SiteAllowInvites,
		&i.MemberCount,
	)
	return &i, err
}

const GetGuild = `-- name: GetGuild :one
SELECT
    guild_id, embed_colour, site_splash_url, site_staff_visible, site_guild_visible, site_allow_invites, member_count
FROM
    guilds
WHERE
    guild_id = $1
`

func (q *Queries) GetGuild(ctx context.Context, guildID int64) (*Guilds, error) {
	row := q.db.QueryRow(ctx, GetGuild, guildID)
	var i Guilds
	err := row.Scan(
		&i.GuildID,
		&i.EmbedColour,
		&i.SiteSplashUrl,
		&i.SiteStaffVisible,
		&i.SiteGuildVisible,
		&i.SiteAllowInvites,
		&i.MemberCount,
	)
	return &i, err
}

const IncrementGuildMemberCount = `-- name: IncrementGuildMemberCount :one
UPDATE
    guilds
SET
    member_count = COALESCE(member_count, $2) + $3
WHERE
    guild_id = $1
RETURNING
    member_count
`

type IncrementGuildMemberCountParams struct {
	GuildID             int64 `json:"guild_id"`
	GuildMembersDefault int32 `json:"guild_members_default"`
	Increment           int32 `json:"increment"`
}

func (q *Queries) IncrementGuildMemberCount(ctx context.Context, arg IncrementGuildMemberCountParams) (int32, error) {
	row := q.db.QueryRow(ctx, IncrementGuildMemberCount, arg.GuildID, arg.GuildMembersDefault, arg.Increment)
	var member_count int32
	err := row.Scan(&member_count)
	return member_count, err
}

const SetGuildMemberCount = `-- name: SetGuildMemberCount :execrows
UPDATE
    guilds
SET
    member_count = GREATEST(member_count, $2)
WHERE
    guild_id = $1
`

type SetGuildMemberCountParams struct {
	GuildID     int64 `json:"guild_id"`
	MemberCount int32 `json:"member_count"`
}

func (q *Queries) SetGuildMemberCount(ctx context.Context, arg SetGuildMemberCountParams) (int64, error) {
	result, err := q.db.Exec(ctx, SetGuildMemberCount, arg.GuildID, arg.MemberCount)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const UpdateGuild = `-- name: UpdateGuild :execrows
UPDATE
    guilds
SET
    embed_colour = $2,
    site_splash_url = $3,
    site_staff_visible = $4,
    site_guild_visible = $5,
    site_allow_invites = $6
WHERE
    guild_id = $1
`

type UpdateGuildParams struct {
	GuildID          int64  `json:"guild_id"`
	EmbedColour      int32  `json:"embed_colour"`
	SiteSplashUrl    string `json:"site_splash_url"`
	SiteStaffVisible bool   `json:"site_staff_visible"`
	SiteGuildVisible bool   `json:"site_guild_visible"`
	SiteAllowInvites bool   `json:"site_allow_invites"`
}

func (q *Queries) UpdateGuild(ctx context.Context, arg UpdateGuildParams) (int64, error) {
	result, err := q.db.Exec(ctx, UpdateGuild,
		arg.GuildID,
		arg.EmbedColour,
		arg.SiteSplashUrl,
		arg.SiteStaffVisible,
		arg.SiteGuildVisible,
		arg.SiteAllowInvites,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
