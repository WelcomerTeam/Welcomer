// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: guild_settings_rules_query.sql

package database

import (
	"context"
)

const CreateOrUpdateRulesGuildSettings = `-- name: CreateOrUpdateRulesGuildSettings :one
INSERT INTO guild_settings_rules (guild_id, toggle_enabled, toggle_dms_enabled, rules)
    VALUES ($1, $2, $3, $4)
ON CONFLICT(guild_id) DO UPDATE
    SET toggle_enabled = EXCLUDED.toggle_enabled,
        toggle_dms_enabled = EXCLUDED.toggle_dms_enabled,
        rules = EXCLUDED.rules
RETURNING
    guild_id, toggle_enabled, toggle_dms_enabled, rules
`

type CreateOrUpdateRulesGuildSettingsParams struct {
	GuildID          int64    `json:"guild_id"`
	ToggleEnabled    bool     `json:"toggle_enabled"`
	ToggleDmsEnabled bool     `json:"toggle_dms_enabled"`
	Rules            []string `json:"rules"`
}

func (q *Queries) CreateOrUpdateRulesGuildSettings(ctx context.Context, arg CreateOrUpdateRulesGuildSettingsParams) (*GuildSettingsRules, error) {
	row := q.db.QueryRow(ctx, CreateOrUpdateRulesGuildSettings,
		arg.GuildID,
		arg.ToggleEnabled,
		arg.ToggleDmsEnabled,
		arg.Rules,
	)
	var i GuildSettingsRules
	err := row.Scan(
		&i.GuildID,
		&i.ToggleEnabled,
		&i.ToggleDmsEnabled,
		&i.Rules,
	)
	return &i, err
}

const CreateRulesGuildSettings = `-- name: CreateRulesGuildSettings :one
INSERT INTO guild_settings_rules (guild_id, toggle_enabled, toggle_dms_enabled, rules)
    VALUES ($1, $2, $3, $4)
RETURNING
    guild_id, toggle_enabled, toggle_dms_enabled, rules
`

type CreateRulesGuildSettingsParams struct {
	GuildID          int64    `json:"guild_id"`
	ToggleEnabled    bool     `json:"toggle_enabled"`
	ToggleDmsEnabled bool     `json:"toggle_dms_enabled"`
	Rules            []string `json:"rules"`
}

func (q *Queries) CreateRulesGuildSettings(ctx context.Context, arg CreateRulesGuildSettingsParams) (*GuildSettingsRules, error) {
	row := q.db.QueryRow(ctx, CreateRulesGuildSettings,
		arg.GuildID,
		arg.ToggleEnabled,
		arg.ToggleDmsEnabled,
		arg.Rules,
	)
	var i GuildSettingsRules
	err := row.Scan(
		&i.GuildID,
		&i.ToggleEnabled,
		&i.ToggleDmsEnabled,
		&i.Rules,
	)
	return &i, err
}

const GetRulesGuildSettings = `-- name: GetRulesGuildSettings :one
SELECT
    guild_id, toggle_enabled, toggle_dms_enabled, rules
FROM
    guild_settings_rules
WHERE
    guild_id = $1
`

func (q *Queries) GetRulesGuildSettings(ctx context.Context, guildID int64) (*GuildSettingsRules, error) {
	row := q.db.QueryRow(ctx, GetRulesGuildSettings, guildID)
	var i GuildSettingsRules
	err := row.Scan(
		&i.GuildID,
		&i.ToggleEnabled,
		&i.ToggleDmsEnabled,
		&i.Rules,
	)
	return &i, err
}

const UpdateRuleGuildSettings = `-- name: UpdateRuleGuildSettings :execrows
UPDATE
    guild_settings_rules
SET
    toggle_enabled = $2,
    toggle_dms_enabled = $3,
    rules = $4
WHERE
    guild_id = $1
`

type UpdateRuleGuildSettingsParams struct {
	GuildID          int64    `json:"guild_id"`
	ToggleEnabled    bool     `json:"toggle_enabled"`
	ToggleDmsEnabled bool     `json:"toggle_dms_enabled"`
	Rules            []string `json:"rules"`
}

func (q *Queries) UpdateRuleGuildSettings(ctx context.Context, arg UpdateRuleGuildSettingsParams) (int64, error) {
	result, err := q.db.Exec(ctx, UpdateRuleGuildSettings,
		arg.GuildID,
		arg.ToggleEnabled,
		arg.ToggleDmsEnabled,
		arg.Rules,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
