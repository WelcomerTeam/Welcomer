// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: guild_custom_bots_query.sql

package database

import (
	"context"
	"time"

	"github.com/gofrs/uuid"
)

const CreateCustomBot = `-- name: CreateCustomBot :one
INSERT INTO custom_bots (custom_bot_uuid, guild_id, public_key, token, created_at, is_active, application_id, application_name, application_avatar, environment)
VALUES ($1, $2, $3, $4, now(), $5, $6, $7, $8, $9)
RETURNING
    custom_bot_uuid, guild_id, public_key, token, created_at, is_active, application_id, application_name, application_avatar, environment
`

type CreateCustomBotParams struct {
	CustomBotUuid     uuid.UUID `json:"custom_bot_uuid"`
	GuildID           int64     `json:"guild_id"`
	PublicKey         string    `json:"public_key"`
	Token             string    `json:"token"`
	IsActive          bool      `json:"is_active"`
	ApplicationID     int64     `json:"application_id"`
	ApplicationName   string    `json:"application_name"`
	ApplicationAvatar string    `json:"application_avatar"`
	Environment       string    `json:"environment"`
}

func (q *Queries) CreateCustomBot(ctx context.Context, arg CreateCustomBotParams) (*CustomBots, error) {
	row := q.db.QueryRow(ctx, CreateCustomBot,
		arg.CustomBotUuid,
		arg.GuildID,
		arg.PublicKey,
		arg.Token,
		arg.IsActive,
		arg.ApplicationID,
		arg.ApplicationName,
		arg.ApplicationAvatar,
		arg.Environment,
	)
	var i CustomBots
	err := row.Scan(
		&i.CustomBotUuid,
		&i.GuildID,
		&i.PublicKey,
		&i.Token,
		&i.CreatedAt,
		&i.IsActive,
		&i.ApplicationID,
		&i.ApplicationName,
		&i.ApplicationAvatar,
		&i.Environment,
	)
	return &i, err
}

const DeleteCustomBot = `-- name: DeleteCustomBot :execrows
DELETE FROM
    custom_bots
WHERE
    custom_bot_uuid = $1
`

func (q *Queries) DeleteCustomBot(ctx context.Context, customBotUuid uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, DeleteCustomBot, customBotUuid)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const GetAllCustomBotsWithToken = `-- name: GetAllCustomBotsWithToken :many
SELECT
    custom_bot_uuid, guild_id, public_key, token, created_at, is_active, application_id, application_name, application_avatar, environment
FROM
    custom_bots
WHERE
    is_active = true
    AND token IS NOT NULL
    AND token != ''
    AND environment = $1
`

func (q *Queries) GetAllCustomBotsWithToken(ctx context.Context, environment string) ([]*CustomBots, error) {
	rows, err := q.db.Query(ctx, GetAllCustomBotsWithToken, environment)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*CustomBots{}
	for rows.Next() {
		var i CustomBots
		if err := rows.Scan(
			&i.CustomBotUuid,
			&i.GuildID,
			&i.PublicKey,
			&i.Token,
			&i.CreatedAt,
			&i.IsActive,
			&i.ApplicationID,
			&i.ApplicationName,
			&i.ApplicationAvatar,
			&i.Environment,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetCustomBotById = `-- name: GetCustomBotById :one
SELECT
    custom_bot_uuid,
    guild_id,
    public_key,
    created_at,
    is_active,
    application_id,
    application_name,
    application_avatar,
    environment
FROM
    custom_bots
WHERE
    custom_bot_uuid = $1
    AND guild_id = $2
`

type GetCustomBotByIdParams struct {
	CustomBotUuid uuid.UUID `json:"custom_bot_uuid"`
	GuildID       int64     `json:"guild_id"`
}

type GetCustomBotByIdRow struct {
	CustomBotUuid     uuid.UUID `json:"custom_bot_uuid"`
	GuildID           int64     `json:"guild_id"`
	PublicKey         string    `json:"public_key"`
	CreatedAt         time.Time `json:"created_at"`
	IsActive          bool      `json:"is_active"`
	ApplicationID     int64     `json:"application_id"`
	ApplicationName   string    `json:"application_name"`
	ApplicationAvatar string    `json:"application_avatar"`
	Environment       string    `json:"environment"`
}

func (q *Queries) GetCustomBotById(ctx context.Context, arg GetCustomBotByIdParams) (*GetCustomBotByIdRow, error) {
	row := q.db.QueryRow(ctx, GetCustomBotById, arg.CustomBotUuid, arg.GuildID)
	var i GetCustomBotByIdRow
	err := row.Scan(
		&i.CustomBotUuid,
		&i.GuildID,
		&i.PublicKey,
		&i.CreatedAt,
		&i.IsActive,
		&i.ApplicationID,
		&i.ApplicationName,
		&i.ApplicationAvatar,
		&i.Environment,
	)
	return &i, err
}

const GetCustomBotByIdWithToken = `-- name: GetCustomBotByIdWithToken :one
SELECT
    custom_bot_uuid, guild_id, public_key, token, created_at, is_active, application_id, application_name, application_avatar, environment
FROM
    custom_bots
WHERE
    custom_bot_uuid = $1
    AND guild_id = $2
`

type GetCustomBotByIdWithTokenParams struct {
	CustomBotUuid uuid.UUID `json:"custom_bot_uuid"`
	GuildID       int64     `json:"guild_id"`
}

func (q *Queries) GetCustomBotByIdWithToken(ctx context.Context, arg GetCustomBotByIdWithTokenParams) (*CustomBots, error) {
	row := q.db.QueryRow(ctx, GetCustomBotByIdWithToken, arg.CustomBotUuid, arg.GuildID)
	var i CustomBots
	err := row.Scan(
		&i.CustomBotUuid,
		&i.GuildID,
		&i.PublicKey,
		&i.Token,
		&i.CreatedAt,
		&i.IsActive,
		&i.ApplicationID,
		&i.ApplicationName,
		&i.ApplicationAvatar,
		&i.Environment,
	)
	return &i, err
}

const GetCustomBotsByGuildId = `-- name: GetCustomBotsByGuildId :many
SELECT
    custom_bot_uuid,
    guild_id,
    public_key,
    created_at,
    is_active,
    application_id,
    application_name,
    application_avatar,
    environment
FROM
    custom_bots
WHERE
    guild_id = $1
`

type GetCustomBotsByGuildIdRow struct {
	CustomBotUuid     uuid.UUID `json:"custom_bot_uuid"`
	GuildID           int64     `json:"guild_id"`
	PublicKey         string    `json:"public_key"`
	CreatedAt         time.Time `json:"created_at"`
	IsActive          bool      `json:"is_active"`
	ApplicationID     int64     `json:"application_id"`
	ApplicationName   string    `json:"application_name"`
	ApplicationAvatar string    `json:"application_avatar"`
	Environment       string    `json:"environment"`
}

func (q *Queries) GetCustomBotsByGuildId(ctx context.Context, guildID int64) ([]*GetCustomBotsByGuildIdRow, error) {
	rows, err := q.db.Query(ctx, GetCustomBotsByGuildId, guildID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetCustomBotsByGuildIdRow{}
	for rows.Next() {
		var i GetCustomBotsByGuildIdRow
		if err := rows.Scan(
			&i.CustomBotUuid,
			&i.GuildID,
			&i.PublicKey,
			&i.CreatedAt,
			&i.IsActive,
			&i.ApplicationID,
			&i.ApplicationName,
			&i.ApplicationAvatar,
			&i.Environment,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateCustomBot = `-- name: UpdateCustomBot :one
UPDATE
    custom_bots
SET
    public_key = $2,
    is_active = $3,
    application_id = $4,
    application_name = $5,
    application_avatar = $6,
    environment = $7
WHERE
    custom_bot_uuid = $1
RETURNING
    custom_bot_uuid, guild_id, public_key, token, created_at, is_active, application_id, application_name, application_avatar, environment
`

type UpdateCustomBotParams struct {
	CustomBotUuid     uuid.UUID `json:"custom_bot_uuid"`
	PublicKey         string    `json:"public_key"`
	IsActive          bool      `json:"is_active"`
	ApplicationID     int64     `json:"application_id"`
	ApplicationName   string    `json:"application_name"`
	ApplicationAvatar string    `json:"application_avatar"`
	Environment       string    `json:"environment"`
}

func (q *Queries) UpdateCustomBot(ctx context.Context, arg UpdateCustomBotParams) (*CustomBots, error) {
	row := q.db.QueryRow(ctx, UpdateCustomBot,
		arg.CustomBotUuid,
		arg.PublicKey,
		arg.IsActive,
		arg.ApplicationID,
		arg.ApplicationName,
		arg.ApplicationAvatar,
		arg.Environment,
	)
	var i CustomBots
	err := row.Scan(
		&i.CustomBotUuid,
		&i.GuildID,
		&i.PublicKey,
		&i.Token,
		&i.CreatedAt,
		&i.IsActive,
		&i.ApplicationID,
		&i.ApplicationName,
		&i.ApplicationAvatar,
		&i.Environment,
	)
	return &i, err
}

const UpdateCustomBotToken = `-- name: UpdateCustomBotToken :one
UPDATE
    custom_bots
SET
    public_key = $2,
    token = $3,
    is_active = $4,
    application_id = $5,
    application_name = $6,
    application_avatar = $7,
    environment = $8
WHERE
    custom_bot_uuid = $1
RETURNING
    custom_bot_uuid, guild_id, public_key, token, created_at, is_active, application_id, application_name, application_avatar, environment
`

type UpdateCustomBotTokenParams struct {
	CustomBotUuid     uuid.UUID `json:"custom_bot_uuid"`
	PublicKey         string    `json:"public_key"`
	Token             string    `json:"token"`
	IsActive          bool      `json:"is_active"`
	ApplicationID     int64     `json:"application_id"`
	ApplicationName   string    `json:"application_name"`
	ApplicationAvatar string    `json:"application_avatar"`
	Environment       string    `json:"environment"`
}

func (q *Queries) UpdateCustomBotToken(ctx context.Context, arg UpdateCustomBotTokenParams) (*CustomBots, error) {
	row := q.db.QueryRow(ctx, UpdateCustomBotToken,
		arg.CustomBotUuid,
		arg.PublicKey,
		arg.Token,
		arg.IsActive,
		arg.ApplicationID,
		arg.ApplicationName,
		arg.ApplicationAvatar,
		arg.Environment,
	)
	var i CustomBots
	err := row.Scan(
		&i.CustomBotUuid,
		&i.GuildID,
		&i.PublicKey,
		&i.Token,
		&i.CreatedAt,
		&i.IsActive,
		&i.ApplicationID,
		&i.ApplicationName,
		&i.ApplicationAvatar,
		&i.Environment,
	)
	return &i, err
}
