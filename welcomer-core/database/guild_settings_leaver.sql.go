// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: guild_settings_leaver.sql

package database

import (
	"context"

	"github.com/jackc/pgtype"
)

const CreateLeaverGuildSettings = `-- name: CreateLeaverGuildSettings :one
INSERT INTO guild_settings_leaver (guild_id, toggle_enabled, channel, message_format)
    VALUES ($1, $2, $3, $4)
RETURNING
    guild_id, toggle_enabled, channel, message_format
`

type CreateLeaverGuildSettingsParams struct {
	GuildID       int64        `json:"guild_id"`
	ToggleEnabled bool         `json:"toggle_enabled"`
	Channel       int64        `json:"channel"`
	MessageFormat pgtype.JSONB `json:"message_format"`
}

func (q *Queries) CreateLeaverGuildSettings(ctx context.Context, arg CreateLeaverGuildSettingsParams) (*GuildSettingsLeaver, error) {
	row := q.db.QueryRow(ctx, CreateLeaverGuildSettings,
		arg.GuildID,
		arg.ToggleEnabled,
		arg.Channel,
		arg.MessageFormat,
	)
	var i GuildSettingsLeaver
	err := row.Scan(
		&i.GuildID,
		&i.ToggleEnabled,
		&i.Channel,
		&i.MessageFormat,
	)
	return &i, err
}

const CreateOrUpdateLeaverGuildSettings = `-- name: CreateOrUpdateLeaverGuildSettings :one
INSERT INTO guild_settings_leaver (guild_id, toggle_enabled, channel, message_format)
    VALUES ($1, $2, $3, $4)
ON CONFLICT(guild_id) DO UPDATE
    SET toggle_enabled = EXCLUDED.toggle_enabled,
        channel = EXCLUDED.channel,
        message_format = EXCLUDED.message_format
RETURNING
    guild_id, toggle_enabled, channel, message_format
`

type CreateOrUpdateLeaverGuildSettingsParams struct {
	GuildID       int64        `json:"guild_id"`
	ToggleEnabled bool         `json:"toggle_enabled"`
	Channel       int64        `json:"channel"`
	MessageFormat pgtype.JSONB `json:"message_format"`
}

func (q *Queries) CreateOrUpdateLeaverGuildSettings(ctx context.Context, arg CreateOrUpdateLeaverGuildSettingsParams) (*GuildSettingsLeaver, error) {
	row := q.db.QueryRow(ctx, CreateOrUpdateLeaverGuildSettings,
		arg.GuildID,
		arg.ToggleEnabled,
		arg.Channel,
		arg.MessageFormat,
	)
	var i GuildSettingsLeaver
	err := row.Scan(
		&i.GuildID,
		&i.ToggleEnabled,
		&i.Channel,
		&i.MessageFormat,
	)
	return &i, err
}

const GetLeaverGuildSettings = `-- name: GetLeaverGuildSettings :one
SELECT
    guild_id, toggle_enabled, channel, message_format
FROM
    guild_settings_leaver
WHERE
    guild_id = $1
`

func (q *Queries) GetLeaverGuildSettings(ctx context.Context, guildID int64) (*GuildSettingsLeaver, error) {
	row := q.db.QueryRow(ctx, GetLeaverGuildSettings, guildID)
	var i GuildSettingsLeaver
	err := row.Scan(
		&i.GuildID,
		&i.ToggleEnabled,
		&i.Channel,
		&i.MessageFormat,
	)
	return &i, err
}

const UpdateLeaverGuildSettings = `-- name: UpdateLeaverGuildSettings :execrows
UPDATE
    guild_settings_leaver
SET
    toggle_enabled = $2,
    channel = $3,
    message_format = $4
WHERE
    guild_id = $1
`

type UpdateLeaverGuildSettingsParams struct {
	GuildID       int64        `json:"guild_id"`
	ToggleEnabled bool         `json:"toggle_enabled"`
	Channel       int64        `json:"channel"`
	MessageFormat pgtype.JSONB `json:"message_format"`
}

func (q *Queries) UpdateLeaverGuildSettings(ctx context.Context, arg UpdateLeaverGuildSettingsParams) (int64, error) {
	result, err := q.db.Exec(ctx, UpdateLeaverGuildSettings,
		arg.GuildID,
		arg.ToggleEnabled,
		arg.Channel,
		arg.MessageFormat,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
