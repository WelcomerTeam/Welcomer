// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: guild_borderwall_requests_query.sql

package database

import (
	"context"
	"database/sql"

	"github.com/gofrs/uuid"
	"github.com/jackc/pgtype"
)

const CreateBorderwallRequest = `-- name: CreateBorderwallRequest :one
INSERT INTO borderwall_requests (request_uuid, created_at, updated_at, guild_id, user_id, is_verified)
    VALUES (uuid_generate_v7(), now(), now(), $1, $2, 0)
RETURNING
    request_uuid, created_at, updated_at, guild_id, user_id, is_verified, verified_at, ip_address, recaptcha_score, ipintel_score, ua_family, ua_family_version, ua_os, ua_os_version
`

type CreateBorderwallRequestParams struct {
	GuildID int64 `json:"guild_id"`
	UserID  int64 `json:"user_id"`
}

func (q *Queries) CreateBorderwallRequest(ctx context.Context, arg *CreateBorderwallRequestParams) (*BorderwallRequests, error) {
	row := q.db.QueryRow(ctx, CreateBorderwallRequest, arg.GuildID, arg.UserID)
	var i BorderwallRequests
	err := row.Scan(
		&i.RequestUuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GuildID,
		&i.UserID,
		&i.IsVerified,
		&i.VerifiedAt,
		&i.IpAddress,
		&i.RecaptchaScore,
		&i.IpintelScore,
		&i.UaFamily,
		&i.UaFamilyVersion,
		&i.UaOs,
		&i.UaOsVersion,
	)
	return &i, err
}

const GetBorderwallRequest = `-- name: GetBorderwallRequest :one
SELECT
    request_uuid, created_at, updated_at, guild_id, user_id, is_verified, verified_at, ip_address, recaptcha_score, ipintel_score, ua_family, ua_family_version, ua_os, ua_os_version
FROM
    borderwall_requests
WHERE
    request_uuid = $1
`

func (q *Queries) GetBorderwallRequest(ctx context.Context, requestUuid uuid.UUID) (*BorderwallRequests, error) {
	row := q.db.QueryRow(ctx, GetBorderwallRequest, requestUuid)
	var i BorderwallRequests
	err := row.Scan(
		&i.RequestUuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GuildID,
		&i.UserID,
		&i.IsVerified,
		&i.VerifiedAt,
		&i.IpAddress,
		&i.RecaptchaScore,
		&i.IpintelScore,
		&i.UaFamily,
		&i.UaFamilyVersion,
		&i.UaOs,
		&i.UaOsVersion,
	)
	return &i, err
}

const GetBorderwallRequestsByGuildIDUserID = `-- name: GetBorderwallRequestsByGuildIDUserID :many
SELECT
    request_uuid, created_at, updated_at, guild_id, user_id, is_verified, verified_at, ip_address, recaptcha_score, ipintel_score, ua_family, ua_family_version, ua_os, ua_os_version
FROM
    borderwall_requests
WHERE
    guild_id = $1
    AND user_id = $2
`

type GetBorderwallRequestsByGuildIDUserIDParams struct {
	GuildID int64 `json:"guild_id"`
	UserID  int64 `json:"user_id"`
}

func (q *Queries) GetBorderwallRequestsByGuildIDUserID(ctx context.Context, arg *GetBorderwallRequestsByGuildIDUserIDParams) ([]*BorderwallRequests, error) {
	rows, err := q.db.Query(ctx, GetBorderwallRequestsByGuildIDUserID, arg.GuildID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*BorderwallRequests{}
	for rows.Next() {
		var i BorderwallRequests
		if err := rows.Scan(
			&i.RequestUuid,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.GuildID,
			&i.UserID,
			&i.IsVerified,
			&i.VerifiedAt,
			&i.IpAddress,
			&i.RecaptchaScore,
			&i.IpintelScore,
			&i.UaFamily,
			&i.UaFamilyVersion,
			&i.UaOs,
			&i.UaOsVersion,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetBorderwallRequestsByIPAddress = `-- name: GetBorderwallRequestsByIPAddress :many
SELECT
    request_uuid, created_at, updated_at, guild_id, user_id, is_verified, verified_at, ip_address, recaptcha_score, ipintel_score, ua_family, ua_family_version, ua_os, ua_os_version
FROM
    borderwall_requests
WHERE
    ip_address = $1
`

func (q *Queries) GetBorderwallRequestsByIPAddress(ctx context.Context, ipAddress pgtype.Inet) ([]*BorderwallRequests, error) {
	rows, err := q.db.Query(ctx, GetBorderwallRequestsByIPAddress, ipAddress)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*BorderwallRequests{}
	for rows.Next() {
		var i BorderwallRequests
		if err := rows.Scan(
			&i.RequestUuid,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.GuildID,
			&i.UserID,
			&i.IsVerified,
			&i.VerifiedAt,
			&i.IpAddress,
			&i.RecaptchaScore,
			&i.IpintelScore,
			&i.UaFamily,
			&i.UaFamilyVersion,
			&i.UaOs,
			&i.UaOsVersion,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateBorderwallRequest = `-- name: UpdateBorderwallRequest :execrows
UPDATE
    borderwall_requests
SET
    updated_at = now(),
    is_verified = $2,
    verified_at = $3,
    ip_address = $4,
    recaptcha_score = $5,
    ipintel_score = $6,
    ua_family = $7,
    ua_family_version = $8,
    ua_os = $9,
    ua_os_version = $10
WHERE
    request_uuid = $1
`

type UpdateBorderwallRequestParams struct {
	RequestUuid     uuid.UUID       `json:"request_uuid"`
	IsVerified      bool            `json:"is_verified"`
	VerifiedAt      sql.NullTime    `json:"verified_at"`
	IpAddress       pgtype.Inet     `json:"ip_address"`
	RecaptchaScore  sql.NullFloat64 `json:"recaptcha_score"`
	IpintelScore    sql.NullFloat64 `json:"ipintel_score"`
	UaFamily        sql.NullString  `json:"ua_family"`
	UaFamilyVersion sql.NullString  `json:"ua_family_version"`
	UaOs            sql.NullString  `json:"ua_os"`
	UaOsVersion     sql.NullString  `json:"ua_os_version"`
}

func (q *Queries) UpdateBorderwallRequest(ctx context.Context, arg *UpdateBorderwallRequestParams) (int64, error) {
	result, err := q.db.Exec(ctx, UpdateBorderwallRequest,
		arg.RequestUuid,
		arg.IsVerified,
		arg.VerifiedAt,
		arg.IpAddress,
		arg.RecaptchaScore,
		arg.IpintelScore,
		arg.UaFamily,
		arg.UaFamilyVersion,
		arg.UaOs,
		arg.UaOsVersion,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
