// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: interaction_commands.sql

package database

import (
	"context"
	"time"
)

const ClearInteractionCommands = `-- name: ClearInteractionCommands :execrows
DELETE FROM
    interaction_commands
WHERE
    application_id = $1
`

func (q *Queries) ClearInteractionCommands(ctx context.Context, applicationID int64) (int64, error) {
	result, err := q.db.Exec(ctx, ClearInteractionCommands, applicationID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

type CreateManyInteractionCommandsParams struct {
	ApplicationID int64     `json:"application_id"`
	Command       string    `json:"command"`
	InteractionID int64     `json:"interaction_id"`
	CreatedAt     time.Time `json:"created_at"`
}

const GetInteractionCommand = `-- name: GetInteractionCommand :one
SELECT
    application_id, command, interaction_id, created_at
FROM
    interaction_commands
WHERE
    application_id = $1
    AND command = $2
`

type GetInteractionCommandParams struct {
	ApplicationID int64  `json:"application_id"`
	Command       string `json:"command"`
}

func (q *Queries) GetInteractionCommand(ctx context.Context, arg GetInteractionCommandParams) (*InteractionCommands, error) {
	row := q.db.QueryRow(ctx, GetInteractionCommand, arg.ApplicationID, arg.Command)
	var i InteractionCommands
	err := row.Scan(
		&i.ApplicationID,
		&i.Command,
		&i.InteractionID,
		&i.CreatedAt,
	)
	return &i, err
}
