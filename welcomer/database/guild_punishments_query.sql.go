// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: guild_punishments_query.sql

package database

import (
	"context"

	"github.com/gofrs/uuid"
	"github.com/jackc/pgtype"
)

const CreateGuildPunishment = `-- name: CreateGuildPunishment :one
INSERT INTO guild_punishments (punishment_uuid, created_at, updated_at, guild_id, punishment_type, guild_moderation_event_uuid, user_id, moderator_id, data)
    VALUES (uuid_generate_v4 (), now(), now(), $1, $2, $3, $4, $5, $6)
RETURNING
    punishment_uuid, created_at, updated_at, guild_id, punishment_type, guild_moderation_event_uuid, user_id, moderator_id, data
`

type CreateGuildPunishmentParams struct {
	GuildID                  int64         `json:"guild_id"`
	PunishmentType           int16         `json:"punishment_type"`
	GuildModerationEventUuid uuid.NullUUID `json:"guild_moderation_event_uuid"`
	UserID                   int64         `json:"user_id"`
	ModeratorID              int64         `json:"moderator_id"`
	Data                     pgtype.JSONB  `json:"data"`
}

func (q *Queries) CreateGuildPunishment(ctx context.Context, arg *CreateGuildPunishmentParams) (*GuildPunishments, error) {
	row := q.db.QueryRow(ctx, CreateGuildPunishment,
		arg.GuildID,
		arg.PunishmentType,
		arg.GuildModerationEventUuid,
		arg.UserID,
		arg.ModeratorID,
		arg.Data,
	)
	var i GuildPunishments
	err := row.Scan(
		&i.PunishmentUuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GuildID,
		&i.PunishmentType,
		&i.GuildModerationEventUuid,
		&i.UserID,
		&i.ModeratorID,
		&i.Data,
	)
	return &i, err
}

const GetGuildPunishment = `-- name: GetGuildPunishment :one
SELECT
    punishment_uuid, created_at, updated_at, guild_id, punishment_type, guild_moderation_event_uuid, user_id, moderator_id, data
FROM
    guild_punishments
WHERE
    punishment_uuid = $1
`

func (q *Queries) GetGuildPunishment(ctx context.Context, punishmentUuid uuid.UUID) (*GuildPunishments, error) {
	row := q.db.QueryRow(ctx, GetGuildPunishment, punishmentUuid)
	var i GuildPunishments
	err := row.Scan(
		&i.PunishmentUuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GuildID,
		&i.PunishmentType,
		&i.GuildModerationEventUuid,
		&i.UserID,
		&i.ModeratorID,
		&i.Data,
	)
	return &i, err
}

const GetGuildPunishmentsByGuildIDUserID = `-- name: GetGuildPunishmentsByGuildIDUserID :many
SELECT
    punishment_uuid,
    created_at,
    updated_at,
    guild_id,
    punishment_type,
    guild_moderation_event_uuid,
    user_id,
    moderator_id,
    data
FROM
    guild_punishments
WHERE
    guild_id = $1
    AND user_id = $2
`

type GetGuildPunishmentsByGuildIDUserIDParams struct {
	GuildID int64 `json:"guild_id"`
	UserID  int64 `json:"user_id"`
}

func (q *Queries) GetGuildPunishmentsByGuildIDUserID(ctx context.Context, arg *GetGuildPunishmentsByGuildIDUserIDParams) ([]*GuildPunishments, error) {
	rows, err := q.db.Query(ctx, GetGuildPunishmentsByGuildIDUserID, arg.GuildID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GuildPunishments{}
	for rows.Next() {
		var i GuildPunishments
		if err := rows.Scan(
			&i.PunishmentUuid,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.GuildID,
			&i.PunishmentType,
			&i.GuildModerationEventUuid,
			&i.UserID,
			&i.ModeratorID,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateGuildPunishment = `-- name: UpdateGuildPunishment :execrows
UPDATE
    guild_punishments
SET
    data = $2,
    updated_at = now()
WHERE
    punishment_uuid = $1
`

type UpdateGuildPunishmentParams struct {
	PunishmentUuid uuid.UUID    `json:"punishment_uuid"`
	Data           pgtype.JSONB `json:"data"`
}

func (q *Queries) UpdateGuildPunishment(ctx context.Context, arg *UpdateGuildPunishmentParams) (int64, error) {
	result, err := q.db.Exec(ctx, UpdateGuildPunishment, arg.PunishmentUuid, arg.Data)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
