// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: guild_settings_moderation_query.sql

package database

import (
	"context"
)

const CreateModerationGuildSettings = `-- name: CreateModerationGuildSettings :one
INSERT INTO guild_settings_moderation (guild_id, toggle_reasons_required)
    VALUES ($1, $2)
RETURNING
    guild_id, toggle_reasons_required
`

type CreateModerationGuildSettingsParams struct {
	GuildID               int64 `json:"guild_id"`
	ToggleReasonsRequired bool  `json:"toggle_reasons_required"`
}

func (q *Queries) CreateModerationGuildSettings(ctx context.Context, arg *CreateModerationGuildSettingsParams) (*GuildSettingsModeration, error) {
	row := q.db.QueryRow(ctx, CreateModerationGuildSettings, arg.GuildID, arg.ToggleReasonsRequired)
	var i GuildSettingsModeration
	err := row.Scan(&i.GuildID, &i.ToggleReasonsRequired)
	return &i, err
}

const CreateOrUpdateModerationGuildSettings = `-- name: CreateOrUpdateModerationGuildSettings :one
INSERT INTO guild_settings_moderation (guild_id, toggle_reasons_required)
    VALUES ($1, $2)
ON CONFLICT(guild_id) DO UPDATE
    SET toggle_reasons_required = EXCLUDED.toggle_reasons_required
RETURNING
    guild_id, toggle_reasons_required
`

type CreateOrUpdateModerationGuildSettingsParams struct {
	GuildID               int64 `json:"guild_id"`
	ToggleReasonsRequired bool  `json:"toggle_reasons_required"`
}

func (q *Queries) CreateOrUpdateModerationGuildSettings(ctx context.Context, arg *CreateOrUpdateModerationGuildSettingsParams) (*GuildSettingsModeration, error) {
	row := q.db.QueryRow(ctx, CreateOrUpdateModerationGuildSettings, arg.GuildID, arg.ToggleReasonsRequired)
	var i GuildSettingsModeration
	err := row.Scan(&i.GuildID, &i.ToggleReasonsRequired)
	return &i, err
}

const GetModerationGuildSettings = `-- name: GetModerationGuildSettings :one
SELECT
    guild_id, toggle_reasons_required
FROM
    guild_settings_moderation
WHERE
    guild_id = $1
`

func (q *Queries) GetModerationGuildSettings(ctx context.Context, guildID int64) (*GuildSettingsModeration, error) {
	row := q.db.QueryRow(ctx, GetModerationGuildSettings, guildID)
	var i GuildSettingsModeration
	err := row.Scan(&i.GuildID, &i.ToggleReasonsRequired)
	return &i, err
}

const UpdateModerationGuildSettings = `-- name: UpdateModerationGuildSettings :execrows
UPDATE
    guild_settings_moderation
SET
    toggle_reasons_required = $2
WHERE
    guild_id = $1
`

type UpdateModerationGuildSettingsParams struct {
	GuildID               int64 `json:"guild_id"`
	ToggleReasonsRequired bool  `json:"toggle_reasons_required"`
}

func (q *Queries) UpdateModerationGuildSettings(ctx context.Context, arg *UpdateModerationGuildSettingsParams) (int64, error) {
	result, err := q.db.Exec(ctx, UpdateModerationGuildSettings, arg.GuildID, arg.ToggleReasonsRequired)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
