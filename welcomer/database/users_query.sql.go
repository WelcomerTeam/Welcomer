// Code generated by sqlc. DO NOT EDIT.
// source: users_query.sql

package database

import (
	"context"
	"database/sql"
)

const CreateUser = `-- name: CreateUser :one
INSERT INTO users (user_id, created_at, updated_at, name, discriminator, avatar_hash)
    VALUES ($1, now(), now(), $2, $3, $4)
RETURNING
    user_id, created_at, updated_at, name, discriminator, avatar_hash
`

type CreateUserParams struct {
	UserID        int64          `json:"user_id"`
	Name          string         `json:"name"`
	Discriminator string         `json:"discriminator"`
	AvatarHash    sql.NullString `json:"avatar_hash"`
}

func (q *Queries) CreateUser(ctx context.Context, arg *CreateUserParams) (*Users, error) {
	row := q.db.QueryRow(ctx, CreateUser,
		arg.UserID,
		arg.Name,
		arg.Discriminator,
		arg.AvatarHash,
	)
	var i Users
	err := row.Scan(
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Discriminator,
		&i.AvatarHash,
	)
	return &i, err
}

const GetUser = `-- name: GetUser :one
SELECT
    user_id, created_at, updated_at, name, discriminator, avatar_hash
FROM
    users
WHERE
    user_id = $1
`

func (q *Queries) GetUser(ctx context.Context, userID int64) (*Users, error) {
	row := q.db.QueryRow(ctx, GetUser, userID)
	var i Users
	err := row.Scan(
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Discriminator,
		&i.AvatarHash,
	)
	return &i, err
}

const UpdateUser = `-- name: UpdateUser :execrows
UPDATE
    users
SET
    name = $2,
    discriminator = $3,
    avatar_hash = $4,
    updated_at = now()
WHERE
    user_id = $1
`

type UpdateUserParams struct {
	UserID        int64          `json:"user_id"`
	Name          string         `json:"name"`
	Discriminator string         `json:"discriminator"`
	AvatarHash    sql.NullString `json:"avatar_hash"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg *UpdateUserParams) (int64, error) {
	result, err := q.db.Exec(ctx, UpdateUser,
		arg.UserID,
		arg.Name,
		arg.Discriminator,
		arg.AvatarHash,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
