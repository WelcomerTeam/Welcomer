// Code generated by sqlc. DO NOT EDIT.
// source: patreon_users_query.sql

package database

import (
	"context"
	"database/sql"
)

const CreatePatreonUser = `-- name: CreatePatreonUser :one
INSERT INTO patreon_users (patreon_user_id, created_at, updated_at, user_id, full_name, email, thumb_url)
    VALUES ($1, now(), now(), $2, $3, $4, $5)
RETURNING
    patreon_user_id, created_at, updated_at, user_id, full_name, email, thumb_url
`

type CreatePatreonUserParams struct {
	PatreonUserID int64          `json:"patreon_user_id"`
	UserID        int64          `json:"user_id"`
	FullName      string         `json:"full_name"`
	Email         sql.NullString `json:"email"`
	ThumbUrl      sql.NullString `json:"thumb_url"`
}

func (q *Queries) CreatePatreonUser(ctx context.Context, arg *CreatePatreonUserParams) (*PatreonUsers, error) {
	row := q.db.QueryRow(ctx, CreatePatreonUser,
		arg.PatreonUserID,
		arg.UserID,
		arg.FullName,
		arg.Email,
		arg.ThumbUrl,
	)
	var i PatreonUsers
	err := row.Scan(
		&i.PatreonUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FullName,
		&i.Email,
		&i.ThumbUrl,
	)
	return &i, err
}

const DeletePatreonUser = `-- name: DeletePatreonUser :execrows
DELETE FROM patreon_users
WHERE patreon_user_id = $1
`

func (q *Queries) DeletePatreonUser(ctx context.Context, patreonUserID int64) (int64, error) {
	result, err := q.db.Exec(ctx, DeletePatreonUser, patreonUserID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const GetPatreonUser = `-- name: GetPatreonUser :one
SELECT
    patreon_user_id, created_at, updated_at, user_id, full_name, email, thumb_url
FROM
    patreon_users
WHERE
    patreon_user_id = $1
`

func (q *Queries) GetPatreonUser(ctx context.Context, patreonUserID int64) (*PatreonUsers, error) {
	row := q.db.QueryRow(ctx, GetPatreonUser, patreonUserID)
	var i PatreonUsers
	err := row.Scan(
		&i.PatreonUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FullName,
		&i.Email,
		&i.ThumbUrl,
	)
	return &i, err
}

const GetPatreonUsersByUserID = `-- name: GetPatreonUsersByUserID :many
SELECT
    patreon_user_id, created_at, updated_at, user_id, full_name, email, thumb_url
FROM
    patreon_users
WHERE
    user_id = $1
`

func (q *Queries) GetPatreonUsersByUserID(ctx context.Context, userID int64) ([]*PatreonUsers, error) {
	rows, err := q.db.Query(ctx, GetPatreonUsersByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*PatreonUsers{}
	for rows.Next() {
		var i PatreonUsers
		if err := rows.Scan(
			&i.PatreonUserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.FullName,
			&i.Email,
			&i.ThumbUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdatePatreonUser = `-- name: UpdatePatreonUser :execrows
UPDATE
    patreon_users
SET
    updated_at = now(),
    user_id = $2,
    full_name = $3,
    email = $4,
    thumb_url = $5
WHERE
    patreon_user_id = $1
`

type UpdatePatreonUserParams struct {
	PatreonUserID int64          `json:"patreon_user_id"`
	UserID        int64          `json:"user_id"`
	FullName      string         `json:"full_name"`
	Email         sql.NullString `json:"email"`
	ThumbUrl      sql.NullString `json:"thumb_url"`
}

func (q *Queries) UpdatePatreonUser(ctx context.Context, arg *UpdatePatreonUserParams) (int64, error) {
	result, err := q.db.Exec(ctx, UpdatePatreonUser,
		arg.PatreonUserID,
		arg.UserID,
		arg.FullName,
		arg.Email,
		arg.ThumbUrl,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
