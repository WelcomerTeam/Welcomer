// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: science_guild_moderation_events_query.sql

package database

import (
	"context"

	"github.com/gofrs/uuid"
	"github.com/jackc/pgtype"
)

const CreateScienceGuildModerationEvent = `-- name: CreateScienceGuildModerationEvent :one
INSERT INTO science_guild_moderation_events (moderation_event_id, guild_id, created_at, event_type, user_id, moderator_id, data)
    VALUES (uuid_generate_v4 (), $1, now(), $2, $3, $4, $5)
RETURNING
    moderation_event_id, guild_id, created_at, event_type, user_id, moderator_id, data
`

type CreateScienceGuildModerationEventParams struct {
	GuildID     int64        `json:"guild_id"`
	EventType   int32        `json:"event_type"`
	UserID      int64        `json:"user_id"`
	ModeratorID int64        `json:"moderator_id"`
	Data        pgtype.JSONB `json:"data"`
}

func (q *Queries) CreateScienceGuildModerationEvent(ctx context.Context, arg *CreateScienceGuildModerationEventParams) (*ScienceGuildModerationEvents, error) {
	row := q.db.QueryRow(ctx, CreateScienceGuildModerationEvent,
		arg.GuildID,
		arg.EventType,
		arg.UserID,
		arg.ModeratorID,
		arg.Data,
	)
	var i ScienceGuildModerationEvents
	err := row.Scan(
		&i.ModerationEventID,
		&i.GuildID,
		&i.CreatedAt,
		&i.EventType,
		&i.UserID,
		&i.ModeratorID,
		&i.Data,
	)
	return &i, err
}

const GetScienceGuildModerationEvent = `-- name: GetScienceGuildModerationEvent :one
SELECT
    moderation_event_id, guild_id, created_at, event_type, user_id, moderator_id, data
FROM
    science_guild_moderation_events
WHERE
    moderation_event_id = $1
`

func (q *Queries) GetScienceGuildModerationEvent(ctx context.Context, moderationEventID uuid.UUID) (*ScienceGuildModerationEvents, error) {
	row := q.db.QueryRow(ctx, GetScienceGuildModerationEvent, moderationEventID)
	var i ScienceGuildModerationEvents
	err := row.Scan(
		&i.ModerationEventID,
		&i.GuildID,
		&i.CreatedAt,
		&i.EventType,
		&i.UserID,
		&i.ModeratorID,
		&i.Data,
	)
	return &i, err
}
