// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: service.proto

package utils_image

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImageGenerationServiceClient is the client API for ImageGenerationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageGenerationServiceClient interface {
	// GenerateImage requests for a new image to be generated. Returns the resulting file.
	GenerateImage(ctx context.Context, in *GenerateImageRequest, opts ...grpc.CallOption) (*GenerateImageResponse, error)
}

type imageGenerationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImageGenerationServiceClient(cc grpc.ClientConnInterface) ImageGenerationServiceClient {
	return &imageGenerationServiceClient{cc}
}

func (c *imageGenerationServiceClient) GenerateImage(ctx context.Context, in *GenerateImageRequest, opts ...grpc.CallOption) (*GenerateImageResponse, error) {
	out := new(GenerateImageResponse)
	err := c.cc.Invoke(ctx, "/service.ImageGenerationService/GenerateImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageGenerationServiceServer is the server API for ImageGenerationService service.
// All implementations must embed UnimplementedImageGenerationServiceServer
// for forward compatibility
type ImageGenerationServiceServer interface {
	// GenerateImage requests for a new image to be generated. Returns the resulting file.
	GenerateImage(context.Context, *GenerateImageRequest) (*GenerateImageResponse, error)
	mustEmbedUnimplementedImageGenerationServiceServer()
}

// UnimplementedImageGenerationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedImageGenerationServiceServer struct {
}

func (UnimplementedImageGenerationServiceServer) GenerateImage(context.Context, *GenerateImageRequest) (*GenerateImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateImage not implemented")
}
func (UnimplementedImageGenerationServiceServer) mustEmbedUnimplementedImageGenerationServiceServer() {
}

// UnsafeImageGenerationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageGenerationServiceServer will
// result in compilation errors.
type UnsafeImageGenerationServiceServer interface {
	mustEmbedUnimplementedImageGenerationServiceServer()
}

func RegisterImageGenerationServiceServer(s grpc.ServiceRegistrar, srv ImageGenerationServiceServer) {
	s.RegisterService(&ImageGenerationService_ServiceDesc, srv)
}

func _ImageGenerationService_GenerateImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageGenerationServiceServer).GenerateImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ImageGenerationService/GenerateImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageGenerationServiceServer).GenerateImage(ctx, req.(*GenerateImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImageGenerationService_ServiceDesc is the grpc.ServiceDesc for ImageGenerationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageGenerationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.ImageGenerationService",
	HandlerType: (*ImageGenerationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateImage",
			Handler:    _ImageGenerationService_GenerateImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
